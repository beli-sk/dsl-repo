#!/usr/bin/env python3

import re
import sys
import argparse
import traceback
import subprocess


LISTFILE = '/etc/apt/sources.list.d/dreamsourcelab.list'
OUR_SOURCE = 'http://archive.coders.sk/dsl {} main'
HEADER = [
        "# DreamSourceLab Debian/Ubuntu repository",
        "# Added by dsl-repo package.",
        "# Recommended way to enable/disable is using command",
        "#   dsl-repoconfig --enable/--disable",
        "#",
        ]

source_re = r'^\s*(?P<comment>#)?\s*(?P<keyword>deb(-src)?)\s+(?P<url>.*?)' \
        r'\s+(?P<release>.*?)\s+(?P<components>.*?)\s*$'


class SourceParseError(ValueError):
    pass

class MultipleSourcesError(ValueError):
    pass


class Source(object):
    def __init__(self, source_line):
        self.source_cre = re.compile(source_re)
        match = self.source_cre.match(source_line)
        if match:
            self.comment = bool(match.group('comment'))
            self.keyword = match.group('keyword')
            self.url = match.group('url')
            self.release = match.group('release')
            self.components = match.group('components').split()
        else:
            raise SourceParseError
    @property
    def enabled(self):
        return not self.comment

    @enabled.setter
    def enabled(self, x):
        self.comment = not bool(x)

    def render(self):
        return '{}{} {} {} {}'.format(
                '# ' if self.comment else '',
                self.keyword,
                self.url,
                self.release,
                ' '.join(self.components),
                )


class SourcesList(object):
    def __init__(self, filename=LISTFILE):
        self.lines = []
        self.our_sources = {'deb': None, 'deb-src': None}
        self.template = Source('deb ' + OUR_SOURCE)
        self.filename = filename

    def __enter__(self):
        try:
            self.file = open(self.filename, 'r+')
            self.created = False
        except FileNotFoundError:
            self.file = open(self.filename, 'w')
            self.created = True
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        try:
            self.file.close()
        except:
            pass

    def generate(self):
        self.lines.clear()
        self.lines.extend(HEADER)

    def add_missing(self):
        for keyword, source in self.our_sources.items():
            if not source:
                source = Source(' '.join((keyword, OUR_SOURCE)))
                self.lines.append(source)
                self.our_sources[keyword] = source

    def read(self):
        self.file.seek(0)
        self.lines.clear()
        for line in self.file:
            line = line.rstrip()
            try:
                source = Source(line)
                self.lines.append(source)
                # if URL is recognized, store as our source
                if source.url == self.template.url:
                    # replace same type only if it is enabled
                    if not self.our_sources[source.keyword] or source.enabled:
                        # refuse replacing enabled source
                        if (self.our_sources[source.keyword] and
                                self.our_sources[source.keyword].enabled):
                            raise MultipleSourcesError(
                                    'Multiple enabled "{}" lines found.'.format(
                                    source.keyword))
                        self.our_sources[source.keyword] = source
            except SourceParseError:
                self.lines.append(line.rstrip())

    def modify(self, name, value):
        """Modify attribute ``name`` with ``value`` on *our* sources.
        Return True if at least one value was changed."""
        changed = False
        for keyword, source in self.our_sources.items():
            if getattr(source, name) != value:
                setattr(source, name, value)
                changed = True
        return changed

    def write(self):
        self.file.seek(0)
        self.file.truncate()
        for line in self.lines:
            try:
                self.file.write(line.render())
            except AttributeError:
                self.file.write(line)
            self.file.write('\n')


class Application(object):
    def __init__(self, argv=[]):
        self.argv = argv
    
    def get_codename(self):
        return subprocess.check_output(['lsb_release', '-sc']).decode('iso-8859-1').strip()

    def parse_args(self):
        parser = argparse.ArgumentParser(
                description='Configure DreamSourceLab repository')
        group = parser.add_mutually_exclusive_group()
        group.add_argument(
                '--disable', action='store_true', help='Disable repository')
        group.add_argument(
                '--enable', action='store_true', help='Enable repository')
        parser.add_argument(
                '--debug', action='store_true', help='Debug output')
        # only to be used by package maintainer scripts
        parser.add_argument(
                '--pkg-maint', action='store_true', help=argparse.SUPPRESS)
        self.args = parser.parse_args(self.argv)

    def print_exception(self):
        exc_type, exc_value, exc_tb = sys.exc_info()
        try:
            if not self.args.debug:
                exc_tb = None
        except:
            pass
        if exc_tb is None:
            msg = ''.join(traceback.format_exception_only(exc_type, exc_value))
        else:
            msg = ''.join(traceback.format_exception(exc_type, exc_value, exc_tb))
        print(msg, end='', file=sys.stderr)

    def main(self, cli=False):
        self.codename = self.get_codename()
        try:
            self.parse_args()
            with SourcesList() as sources_list:
                if sources_list.created:
                    sources_list.generate()
                    print('Generating new configuration.')
                else:
                    sources_list.read()
                added = sources_list.add_missing()
                updated = sources_list.modify('release', self.codename)
                changed = False
                if self.args.enable:
                    changed = sources_list.modify('enabled', True)
                if self.args.disable:
                    changed = sources_list.modify('enabled', False)
                if added or updated or changed:
                    sources_list.write()
                    if updated:
                        print('Repository updated to release "{}"'.format(self.codename))
                    if changed:
                        print('Repository status changed.')
                else:
                    print('Repository configuration not modified.')
        except SystemExit:
            raise
        except:
            if not cli:
                raise
            else:
                self.print_exception()


if __name__ == "__main__":
    Application(sys.argv[1:]).main(cli=True)

